Описание
Я сделал коллекционную дуэльную карточную игру. В текущей версии можно cыграть случайной колодой с ботом. Игроки начинают со своими колодами. Каждый ход оба игрока разыгравают не более одной карты, после чего карты применяются, и на экран пишутся произошедшие действия. (скриншот 1) У меня реализована консольная версия, которая выводит все примененные за ход эффекты. Как мы видим, игра поддерживает различные сложные взаимодействия между картами, которые подробно записываются в консоль. Всего коллекция состоит из 70 карт.

1 мин


Точки расширения
Можно добавлять свои карты. Чтобы сделать карту, нужно создать экземпляр класса CardType, где указывается название, описание, редкость и теги; и также указать в нем экземпляр абстрактного класса EffectMaker.

Абстрактный класс EffectMaker реализует саму функциональность карты.
Для реализации простых карт есть класс SequentialEffectMaker, позволяющий задать карту последовательностью действий (скриншот 2). Как мы видим, этот класс позволяет даже использовать условия в эффектах карт.
Для создания более сложных карт можно отнаследоваться от EffectMaker (скриншот 3). Собственно, GetEffect и есть метод абстрактного класса EffectMaker.

Создав свою коллекцию карт, не забудьте реализовать интерфейс ICardCollection.

Можно также расширить приложение, добавив свой интерфейс, например, графический. Для этого надо реализовать интерфейс IInteractor и передать в конструктор класса Game или в DI-контейнер (скриншот 4).

+2 = 3 мин


Структура
В основе инфраструктуры лежат классы, задающие состояние игры: GameState, PlayerState, CardState. Они определяют основные способы взаимодействия между элементами игры.

Также есть классы, задающие эффекты: EffectMaker, Effect, EffectCall. Effect определяет атомарный эффект карты без контекста, EffectCall хранит контекст: кто применил карту и на кого, EffectMaker генерирует эффекты. У Effect и EffectMaker есть вспомогательные классы EffectPerspective и EffectMakerPerspective, задающие область видимости.

Далее идет слой предметной области и классы, задающие конкретику: GameRules, CardType, Deck, и интерфейс ICardCollection; а также классы, наследованные от классов Effect и EffectMaker. Именно этот слой и позволяет расширять игру, добавляя карты.

Наконец, на самом верхнем слое распологаются классы, реализующие взаимодействие с пользователем - класс Game и интерфейс IInteractor. Есть две реализации - AIInteractor и ConsoleInteractor.

+2 = 5 мин


DI-контйнер
Ну, здесь ничего необычного. (скриншот 5) В DI-контейнере можно указать правила игры, коллекцию карт, колоды, какие интеракторы использовать.

+0.5 = 5.5 мин


Система тестирования
У меня есть 2 тестовых класса.

Первый класс тестирует работу логики игры, то есть классов GameState, PlayerState и CardState. Эти классы довольно независимы от других, поэтому тестировать их легко.

Второй класс тестирует работу отдельных типов карт. Для тестирования я выбрал карты с нетривиальной логикой, в особых случаях тестировал взаимодействие двух и более конкретных карт. В этом классе предполагается, что область тестирования предыдущего класса работает, поэтому здесь используется вся функциональность игры.

+1 = 6.5 мин















Спасибо за внимание, я готов ответить на ваши вопросы.

